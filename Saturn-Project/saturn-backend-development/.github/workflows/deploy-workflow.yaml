name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ development ] # Running only on dev for now
env:  
  DOTNET_CLI_TELEMETRY_OPTOUT: '1'
  
jobs:
  build:

    runs-on: ubuntu-22.04

    steps:    
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Will activate once basic flow starts working 
    # - name: Unit Test
    #   run: |
    #     dotnet tool install dotnet-coverage
    #     dotnet tool run dotnet-coverage collect -f cobertura -o Theraparea.Application dotnet test ./test/Theraparea.Application.Tests/Theraparea.Application.Tests.csproj        
    #     dotnet tool run dotnet-coverage collect -f cobertura -o Theraparea.Domain dotnet test ./test/Theraparea.Domain.Tests/Theraparea.Domain.Tests.csproj        
    #     dotnet tool run dotnet-coverage collect -f cobertura -o Theraparea.EntityFrameworkCore dotnet test ./test/Theraparea.EntityFrameworkCore.Tests/Theraparea.EntityFrameworkCore.Tests.csproj
    #     dotnet tool run dotnet-coverage merge --remove-input-files -o ${{github.workspace}}/coverage.xml -f cobertura -r *.cobertura.xml        
        
    # - uses: codecov/codecov-action@v3
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos 
    #     directory: ${{github.workspace}}
    #     files: ./coverage.xml # optional
    #     flags: unittests # optional
    #     name: codecov-theraparea # optional
    #     fail_ci_if_error: true # optional (default = false)
    #     verbose: true # optional (default = false)
    

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: saturn
        IMAGE_TAG: ${{ github.sha }}
      run: |        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:mig.$IMAGE_TAG -f migrator.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mig.$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "migimage=$ECR_REGISTRY/$ECR_REPOSITORY:mig.$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Run App
      uses: appleboy/ssh-action@v0.1.7
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 495412855472.dkr.ecr.us-east-1.amazonaws.com
            cd saturn
            export $( cat .env | xargs)
            sudo docker compose down
            sed -i 's#IMAGE_NAME=.*$#IMAGE_NAME=${{ steps.build-image.outputs.image }}#' .env
            sed -i 's#MIGRATOR_IMAGE_NAME=.*$#MIGRATOR_IMAGE_NAME=${{ steps.build-image.outputs.migimage }}#' .env
            export $( cat .env | xargs)
            sudo docker compose pull 
            sudo docker compose up -d